CCS PCH C Compiler, Version 5.070, 56587               27-jun.-18 19:02

               Filename:   C:\Users\resen\Documents\Git\SmartCane\Code\main.lst

               ROM used:   976 bytes (3%)
                           Largest free fragment is 31788
               RAM used:   47 (2%) at main() level
                           57 (3%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   02D4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <18F2553.h> 
.................... //////////// Standard Header file for the PIC18F2553 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2553 
*
0172:  MOVLW  8E
0174:  MOVWF  00
0176:  MOVFF  2F,01
017A:  MOVFF  2E,02
017E:  CLRF   03
0180:  MOVF   01,F
0182:  BNZ   0196
0184:  MOVFF  02,01
0188:  CLRF   02
018A:  MOVLW  08
018C:  SUBWF  00,F
018E:  MOVF   01,F
0190:  BNZ   0196
0192:  CLRF   00
0194:  BRA    01A6
0196:  BCF    FD8.0
0198:  BTFSC  01.7
019A:  BRA    01A4
019C:  RLCF   02,F
019E:  RLCF   01,F
01A0:  DECF   00,F
01A2:  BRA    0196
01A4:  BCF    01.7
01A6:  GOTO   035A (RETURN)
01AA:  MOVF   2E,W
01AC:  BTFSC  FD8.2
01AE:  BRA    0292
01B0:  MOVWF  00
01B2:  MOVF   32,W
01B4:  BTFSC  FD8.2
01B6:  BRA    0292
01B8:  ADDWF  00,F
01BA:  BNC   01C4
01BC:  MOVLW  81
01BE:  ADDWF  00,F
01C0:  BC    0292
01C2:  BRA    01CC
01C4:  MOVLW  7F
01C6:  SUBWF  00,F
01C8:  BNC   0292
01CA:  BZ    0292
01CC:  MOVFF  2F,36
01D0:  MOVF   33,W
01D2:  XORWF  36,F
01D4:  BSF    2F.7
01D6:  BSF    33.7
01D8:  MOVF   31,W
01DA:  MULWF  35
01DC:  MOVFF  FF4,38
01E0:  MOVF   30,W
01E2:  MULWF  34
01E4:  MOVFF  FF4,03
01E8:  MOVFF  FF3,37
01EC:  MULWF  35
01EE:  MOVF   FF3,W
01F0:  ADDWF  38,F
01F2:  MOVF   FF4,W
01F4:  ADDWFC 37,F
01F6:  MOVLW  00
01F8:  ADDWFC 03,F
01FA:  MOVF   31,W
01FC:  MULWF  34
01FE:  MOVF   FF3,W
0200:  ADDWF  38,F
0202:  MOVF   FF4,W
0204:  ADDWFC 37,F
0206:  MOVLW  00
0208:  CLRF   02
020A:  ADDWFC 03,F
020C:  ADDWFC 02,F
020E:  MOVF   2F,W
0210:  MULWF  35
0212:  MOVF   FF3,W
0214:  ADDWF  37,F
0216:  MOVF   FF4,W
0218:  ADDWFC 03,F
021A:  MOVLW  00
021C:  ADDWFC 02,F
021E:  MOVF   2F,W
0220:  MULWF  34
0222:  MOVF   FF3,W
0224:  ADDWF  03,F
0226:  MOVF   FF4,W
0228:  ADDWFC 02,F
022A:  MOVLW  00
022C:  CLRF   01
022E:  ADDWFC 01,F
0230:  MOVF   31,W
0232:  MULWF  33
0234:  MOVF   FF3,W
0236:  ADDWF  37,F
0238:  MOVF   FF4,W
023A:  ADDWFC 03,F
023C:  MOVLW  00
023E:  ADDWFC 02,F
0240:  ADDWFC 01,F
0242:  MOVF   30,W
0244:  MULWF  33
0246:  MOVF   FF3,W
0248:  ADDWF  03,F
024A:  MOVF   FF4,W
024C:  ADDWFC 02,F
024E:  MOVLW  00
0250:  ADDWFC 01,F
0252:  MOVF   2F,W
0254:  MULWF  33
0256:  MOVF   FF3,W
0258:  ADDWF  02,F
025A:  MOVF   FF4,W
025C:  ADDWFC 01,F
025E:  INCF   00,F
0260:  BTFSC  01.7
0262:  BRA    026E
0264:  RLCF   37,F
0266:  RLCF   03,F
0268:  RLCF   02,F
026A:  RLCF   01,F
026C:  DECF   00,F
026E:  MOVLW  00
0270:  BTFSS  37.7
0272:  BRA    0288
0274:  INCF   03,F
0276:  ADDWFC 02,F
0278:  ADDWFC 01,F
027A:  MOVF   01,W
027C:  BNZ   0288
027E:  MOVF   02,W
0280:  BNZ   0288
0282:  MOVF   03,W
0284:  BNZ   0288
0286:  INCF   00,F
0288:  BTFSC  36.7
028A:  BSF    01.7
028C:  BTFSS  36.7
028E:  BCF    01.7
0290:  BRA    029A
0292:  CLRF   00
0294:  CLRF   01
0296:  CLRF   02
0298:  CLRF   03
029A:  RETURN 0
029C:  MOVLW  8E
029E:  MOVWF  00
02A0:  MOVF   2E,W
02A2:  SUBWF  00,F
02A4:  MOVFF  2F,02
02A8:  MOVFF  30,01
02AC:  BSF    02.7
02AE:  MOVF   00,F
02B0:  BZ    02C4
02B2:  BCF    FD8.0
02B4:  MOVF   02,F
02B6:  BNZ   02BC
02B8:  MOVF   01,F
02BA:  BZ    02C4
02BC:  RRCF   02,F
02BE:  RRCF   01,F
02C0:  DECFSZ 00,F
02C2:  BRA    02B2
02C4:  BTFSS  2F.7
02C6:  BRA    02D2
02C8:  COMF   01,F
02CA:  COMF   02,F
02CC:  INCF   01,F
02CE:  BTFSC  FD8.2
02D0:  INCF   02,F
02D2:  RETURN 0
....................  
.................... #list 
....................  
.................... #include "Definitions.h" 
.................... #define MAX_TIMER_PRESET 65535 
.................... #define DELAY_SET_ADC    10 
....................  
.................... #fuses NOPROTECT, NOWDT, CCP2C1 
.................... #device adc = 12 
.................... //#use delay (clock = 4000000) 
.................... #use delay(clock=8000000)  
*
00D2:  CLRF   FEA
00D4:  MOVLW  2E
00D6:  MOVWF  FE9
00D8:  MOVF   FEF,W
00DA:  BZ    00F6
00DC:  MOVLW  02
00DE:  MOVWF  01
00E0:  CLRF   00
00E2:  DECFSZ 00,F
00E4:  BRA    00E2
00E6:  DECFSZ 01,F
00E8:  BRA    00E0
00EA:  MOVLW  97
00EC:  MOVWF  00
00EE:  DECFSZ 00,F
00F0:  BRA    00EE
00F2:  DECFSZ FEF,F
00F4:  BRA    00DC
00F6:  RETURN 0
.................... //#include "audio_buzzer.c" 
.................... //#use delay (crystal = 20000000) 
....................  
.................... //#define set_zero(x) x=0  
.................... //#define get_voltage(dataADC) (float) (dataADC * (5.0 / 4095.0)) 
....................  
....................  
.................... int duty = 0, t_flag = 0; 
....................  
.................... int16 data_adc0, data_adc1, Pa, Pb; 
.................... float volt_adc0, volt_adc1; 
.................... int duty1, duty2; 
.................... int counterLED = 0; 
....................  
.................... enum Power 
.................... { 
....................    POWER_OFF = 4,  //80% Off 
....................    POWER_ON  = 5,   //20% On 
....................    VoltajeMax  = 5.0, 
....................    AdcCountMax = 4095.0 
.................... }; 
....................  
.................... void Motor1_Start(); 
.................... void start_alert(); 
....................  
.................... //TIMER0 interrupt 
.................... #int_TIMER0 
.................... void t0() 
.................... { 
....................    counterLED++; 
*
00AE:  INCF   2D,F
....................    if( POWER_OFF == counterLED ) 
00B0:  MOVF   2D,W
00B2:  SUBLW  04
00B4:  BNZ   00BC
....................    { 
....................       output_high(pin_a4); 
00B6:  BCF    F92.4
00B8:  BSF    F89.4
....................    } 
00BA:  BRA    00C8
....................    else if ( POWER_ON == counterLED ) 
00BC:  MOVF   2D,W
00BE:  SUBLW  05
00C0:  BNZ   00C8
....................    { 
....................       output_low(pin_a4); 
00C2:  BCF    F92.4
00C4:  BCF    F89.4
....................       counterLED = 0; 
00C6:  CLRF   2D
....................    } 
....................     
....................    set_timer0(MAX_TIMER_PRESET); 
00C8:  SETF   FD7
00CA:  SETF   FD6
00CC:  BCF    FF2.2
00CE:  GOTO   0060
.................... } 
....................  
.................... void main() 
*
02D4:  CLRF   FF8
02D6:  BCF    FD0.7
02D8:  BSF    07.7
02DA:  CLRF   19
02DC:  CLRF   1A
02DE:  CLRF   2D
02E0:  MOVF   FC1,W
02E2:  ANDLW  C0
02E4:  IORLW  0F
02E6:  MOVWF  FC1
02E8:  MOVLW  07
02EA:  MOVWF  FB4
.................... { 
....................    setup_oscillator( OSC_8MHZ | OSC_INTRC );  
02EC:  MOVLW  72
02EE:  MOVWF  FD3
02F0:  MOVF   FD3,W
....................    setup_adc(ADC_CLOCK_INTERNAL);    
02F2:  MOVF   FC0,W
02F4:  ANDLW  C0
02F6:  IORLW  07
02F8:  MOVWF  FC0
02FA:  BSF    FC0.7
02FC:  BSF    FC2.0
....................    setup_adc_ports (AN0 | VSS_VDD); //Read ADC0 
02FE:  MOVF   FC1,W
0300:  ANDLW  C0
0302:  IORLW  0E
0304:  MOVWF  FC1
....................    enable_interrupts(INT_RDA); 
0306:  BSF    F9D.5
....................    enable_interrupts(INT_TIMER0); 
0308:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); 
030A:  MOVLW  C0
030C:  IORWF  FF2,F
....................    set_timer0(MAX_TIMER_PRESET); 
030E:  SETF   FD7
0310:  SETF   FD6
....................    setup_timer_0(T0_DIV_1); 
0312:  MOVLW  88
0314:  MOVWF  FD5
....................     
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................    Motor1_Start(); 
0316:  BRA    00F8
....................    start_alert(); 
0318:  BRA    0142
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
031A:  MOVLW  00
031C:  IORLW  06
031E:  MOVWF  FCA
0320:  MOVLW  FF
0322:  MOVWF  FCB
....................    //int m = Salidas.a; 
....................    // TODO: USER CODE!! 
....................    While (TRUE)  
....................    { 
....................        
....................       set_adc_channel(0); 
0324:  MOVLW  00
0326:  MOVWF  01
0328:  MOVF   FC2,W
032A:  ANDLW  C3
032C:  IORWF  01,W
032E:  MOVWF  FC2
....................       delay_us(10); 
0330:  MOVLW  06
0332:  MOVWF  00
0334:  DECFSZ 00,F
0336:  BRA    0334
0338:  NOP   
....................       data_adc0 = read_adc(); 
033A:  BSF    FC2.1
033C:  BTFSC  FC2.1
033E:  BRA    033C
0340:  MOVFF  FC3,1B
0344:  MOVFF  FC4,1C
....................        
....................       volt_adc0 = (float) (data_adc0 * (VoltajeMax / AdcCountMax)); 
0348:  CLRF   26
034A:  CLRF   25
034C:  CLRF   24
034E:  CLRF   23
....................        
....................       Pa = (int8)(data_adc0*(100.0/AdcCountMax)); 
0350:  MOVFF  1C,2F
0354:  MOVFF  1B,2E
0358:  BRA    0172
035A:  MOVFF  03,31
035E:  MOVFF  02,30
0362:  MOVFF  01,2F
0366:  MOVFF  00,2E
036A:  MOVLW  81
036C:  MOVWF  35
036E:  MOVLW  0C
0370:  MOVWF  34
0372:  MOVLW  48
0374:  MOVWF  33
0376:  MOVLW  79
0378:  MOVWF  32
037A:  RCALL  01AA
037C:  MOVFF  03,31
0380:  MOVFF  02,30
0384:  MOVFF  01,2F
0388:  MOVFF  00,2E
038C:  RCALL  029C
038E:  CLRF   20
0390:  MOVFF  01,1F
....................       duty1 = (int8) data_adc0;//*(99.0/255.0); 
0394:  MOVFF  1B,2B
....................       set_pwm1_duty((int8)(volt_adc0*120.0)); 
0398:  MOVFF  26,31
039C:  MOVFF  25,30
03A0:  MOVFF  24,2F
03A4:  MOVFF  23,2E
03A8:  CLRF   35
03AA:  CLRF   34
03AC:  MOVLW  70
03AE:  MOVWF  33
03B0:  MOVLW  85
03B2:  MOVWF  32
03B4:  RCALL  01AA
03B6:  MOVFF  03,31
03BA:  MOVFF  02,30
03BE:  MOVFF  01,2F
03C2:  MOVFF  00,2E
03C6:  RCALL  029C
03C8:  MOVFF  01,2E
03CC:  MOVFF  01,FBE
03D0:  BRA    0324
....................        
....................       /*output_high(pin_a4); 
....................       delay_ms(500); 
....................       output_low(pin_a4); 
....................       delay_ms(500); 
....................       output_high(pin_a5); 
....................       delay_ms(500); 
....................       output_low(pin_a5); 
....................       delay_ms(500);*/ 
....................    } 
....................  
.................... } 
....................  
03D2:  SLEEP 
....................  
....................  
.................... void Motor1_Start() 
.................... { 
....................    output_low(PIN_C2); //CCP1 
*
00F8:  BCF    F94.2
00FA:  BCF    F8B.2
....................    setup_ccp1(CCP_PWM); 
00FC:  BCF    F94.2
00FE:  BCF    F8B.2
0100:  MOVLW  0C
0102:  MOVWF  FBD
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
0104:  MOVLW  00
0106:  IORLW  06
0108:  MOVWF  FCA
010A:  MOVLW  FF
010C:  MOVWF  FCB
....................    duty = 100; 
010E:  MOVLW  64
0110:  MOVWF  19
....................    set_pwm1_duty(duty);         
0112:  MOVFF  19,FBE
....................    delay_ms(250); 
0116:  MOVLW  FA
0118:  MOVWF  2E
011A:  RCALL  00D2
....................    duty = 0; 
011C:  CLRF   19
....................    set_pwm1_duty(duty);       
011E:  MOVFF  19,FBE
....................    delay_ms(80); 
0122:  MOVLW  50
0124:  MOVWF  2E
0126:  RCALL  00D2
....................    duty = 200; 
0128:  MOVLW  C8
012A:  MOVWF  19
....................    set_pwm1_duty(duty);       
012C:  MOVFF  19,FBE
....................    delay_ms(200); 
0130:  MOVWF  2E
0132:  RCALL  00D2
....................    duty = 0; 
0134:  CLRF   19
....................    set_pwm1_duty(duty);     
0136:  MOVFF  19,FBE
....................    output_low(PIN_C2); //CCP1 
013A:  BCF    F94.2
013C:  BCF    F8B.2
013E:  GOTO   0318 (RETURN)
.................... } 
....................  
.................... void start_alert() 
.................... { 
....................    output_low(PIN_C1); //ccp2 
0142:  BCF    F94.1
0144:  BCF    F8B.1
....................    setup_ccp2(CCP_PWM); 
0146:  BCF    F94.1
0148:  BCF    F8B.1
014A:  MOVLW  0C
014C:  MOVWF  FBA
....................    set_pwm2_duty(250);         
014E:  MOVLW  FA
0150:  MOVWF  FBB
....................    delay_ms(250); 
0152:  MOVWF  2E
0154:  RCALL  00D2
....................    set_pwm2_duty(0);       
0156:  CLRF   FBB
....................    delay_ms(80); 
0158:  MOVLW  50
015A:  MOVWF  2E
015C:  RCALL  00D2
....................    set_pwm2_duty(100);       
015E:  MOVLW  64
0160:  MOVWF  FBB
....................    delay_ms(200); 
0162:  MOVLW  C8
0164:  MOVWF  2E
0166:  RCALL  00D2
....................    set_pwm2_duty(0); 
0168:  CLRF   FBB
....................    output_low(PIN_C2); //CCP2 
016A:  BCF    F94.2
016C:  BCF    F8B.2
016E:  GOTO   031A (RETURN)
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: CF3F   PLL12 CPUDIV4 USBDIV FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
