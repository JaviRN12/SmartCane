D G "__PCH__" 0 326 ""5.025""
D G "__DEVICE__" 0 326 "2553"
D G "__DATE__" 0 326 ""05-sep.-19""
D G "__TIME__" 0 326 ""20:00:46"" "Standard Header file for the PIC18F2553 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 45 "int8" `54 
f B "set_tris_a" 1 45 "void(int8 value)" `53 
v L "value" 1 46 "int8" `56 
f B "set_tris_b" 1 46 "void(int8 value)" `55 
v L "value" 1 47 "int8" `58 
f B "set_tris_c" 1 47 "void(int8 value)" `57 
v L "value" 1 48 "int8" `60 
f B "set_tris_e" 1 48 "void(int8 value)" `59 
f B "get_tris_a" 1 49 "int8()" `61 
f B "get_tris_b" 1 50 "int8()" `62 
f B "get_tris_c" 1 51 "int8()" `63 
f B "get_tris_e" 1 52 "int8()" `64 
v L "value" 1 53 "int8" `66 
f B "output_a" 1 53 "void(int8 value)" `65 
v L "value" 1 54 "int8" `68 
f B "output_b" 1 54 "void(int8 value)" `67 
v L "value" 1 55 "int8" `70 
f B "output_c" 1 55 "void(int8 value)" `69 
v L "value" 1 56 "int8" `72 
f B "output_e" 1 56 "void(int8 value)" `71 
f B "input_a" 1 57 "int8()" `73 
f B "input_b" 1 58 "int8()" `74 
f B "input_c" 1 59 "int8()" `75 
f B "input_e" 1 60 "int8()" `76 
f B "input_change_a" 1 61 "int8()" `77 
f B "input_change_b" 1 62 "int8()" `78 
f B "input_change_c" 1 63 "int8()" `79 
f B "input_change_e" 1 64 "int8()" `80 
v L "pin" 1 65 "int16" `82 
f B "input" 1 65 "int8(int16 pin)" `81 
v L "pin" 1 66 "int16" `84 
f B "input_state" 1 66 "int8(int16 pin)" `83 
v L "pin" 1 67 "int16" `86 
f B "output_low" 1 67 "void(int16 pin)" `85 
v L "pin" 1 68 "int16" `88 
f B "output_high" 1 68 "void(int16 pin)" `87 
v L "pin" 1 69 "int16" `90 
f B "output_toggle" 1 69 "void(int16 pin)" `89 
v L "pin" 1 70 "int16" `92 
v L "level" 1 70 "int8" `93 
f B "output_bit" 1 70 "void(int16 pin,int8 level)" `91 
v L "pin" 1 71 "int16" `95 
f B "output_float" 1 71 "void(int16 pin)" `94 
v L "pin" 1 72 "int16" `97 
f B "output_drive" 1 72 "void(int16 pin)" `96  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 76 "31744"
d G "PIN_A1" 1 77 "31745"
d G "PIN_A2" 1 78 "31746"
d G "PIN_A3" 1 79 "31747"
d G "PIN_A4" 1 80 "31748"
d G "PIN_A5" 1 81 "31749"
d G "PIN_A6" 1 82 "31750"
d G "PIN_B0" 1 84 "31752"
d G "PIN_B1" 1 85 "31753"
d G "PIN_B2" 1 86 "31754"
d G "PIN_B3" 1 87 "31755"
d G "PIN_B4" 1 88 "31756"
d G "PIN_B5" 1 89 "31757"
d G "PIN_B6" 1 90 "31758"
d G "PIN_B7" 1 91 "31759"
d G "PIN_C0" 1 93 "31760"
d G "PIN_C1" 1 94 "31761"
d G "PIN_C2" 1 95 "31762"
d G "PIN_C4" 1 96 "31764"
d G "PIN_C5" 1 97 "31765"
d G "PIN_C6" 1 98 "31766"
d G "PIN_C7" 1 99 "31767"
d G "PIN_E3" 1 101 "31779"
d G "FALSE" 1 104 "0"
d G "TRUE" 1 105 "1"
d G "BYTE" 1 107 "int8"
d G "BOOLEAN" 1 108 "int1"
d G "getc" 1 110 "getch"
d G "fgetc" 1 111 "getch"
d G "getchar" 1 112 "getch"
d G "putc" 1 113 "putchar"
d G "fputc" 1 114 "putchar"
d G "fgets" 1 115 "gets"
d G "fputs" 1 116 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 121 "int8()" `98 
f B "reset_cpu" 1 122 "void()" `99 
f B "sleep" 1 123 "void()" `100 
v L "type" 1 124 "int8" `102 
f G "sleep" 1 124 "void(int8 type)" `101  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 126 "7"
d G "MCLR_FROM_SLEEP" 1 127 "11"
d G "MCLR_FROM_RUN" 1 128 "15"
d G "NORMAL_POWER_UP" 1 129 "12"
d G "BROWNOUT_RESTART" 1 130 "14"
d G "WDT_FROM_SLEEP" 1 131 "3"
d G "RESET_INSTRUCTION" 1 132 "0"
d G "SLEEP_FULL" 1 135 "0" "Default"
d G "SLEEP_IDLE" 1 136 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 143 "int8" `104 
f B "setup_timer_0" 1 143 "void(int8 mode)" `103 
v L "value" 1 144 "int16" `106 
f B "set_timer0" 1 144 "void(int16 value)" `105 
f B "get_timer0" 1 145 "int16()" `107 
v L "mode" 1 146 "int8" `109 
v L "prescaler" 1 146 "int8" `110 
f B "setup_counters" 1 146 "void(int8 mode,int8 prescaler)" `108 
v L "value" 1 147 "int16" `112 
f B "set_rtcc" 1 147 "void(int16 value)" `111 
f B "get_rtcc" 1 148 "int16()" `113  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 150 "0"
d G "T0_EXT_L_TO_H" 1 151 "32"
d G "T0_EXT_H_TO_L" 1 152 "48"
d G "T0_DIV_1" 1 154 "8"
d G "T0_DIV_2" 1 155 "0"
d G "T0_DIV_4" 1 156 "1"
d G "T0_DIV_8" 1 157 "2"
d G "T0_DIV_16" 1 158 "3"
d G "T0_DIV_32" 1 159 "4"
d G "T0_DIV_64" 1 160 "5"
d G "T0_DIV_128" 1 161 "6"
d G "T0_DIV_256" 1 162 "7"
d G "T0_OFF" 1 164 "0x80"
d G "T0_8_BIT" 1 166 "0x40"
d G "RTCC_INTERNAL" 1 168 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 169 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 170 "48"
d G "RTCC_DIV_1" 1 171 "8"
d G "RTCC_DIV_2" 1 172 "0"
d G "RTCC_DIV_4" 1 173 "1"
d G "RTCC_DIV_8" 1 174 "2"
d G "RTCC_DIV_16" 1 175 "3"
d G "RTCC_DIV_32" 1 176 "4"
d G "RTCC_DIV_64" 1 177 "5"
d G "RTCC_DIV_128" 1 178 "6"
d G "RTCC_DIV_256" 1 179 "7"
d G "RTCC_OFF" 1 180 "0x80"
d G "RTCC_8_BIT" 1 181 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 192 "int16" `115 
f B "setup_wdt" 1 192 "void(int16 mode)" `114 
f B "restart_wdt" 1 193 "void()" `116  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 195 "0x100"
d G "WDT_OFF" 1 196 "0"
d G "WDT_4MS" 1 198 "0x300"
d G "WDT_8MS" 1 199 "0x500"
d G "WDT_16MS" 1 200 "0x700"
d G "WDT_32MS" 1 201 "0x900"
d G "WDT_64MS" 1 202 "0xB00"
d G "WDT_128MS" 1 203 "0xD00"
d G "WDT_256MS" 1 204 "0xF00"
d G "WDT_512MS" 1 205 "0x1100"
d G "WDT_1S" 1 206 "0x1300"
d G "WDT_2S" 1 207 "0x1500"
d G "WDT_4S" 1 208 "0x1700"
d G "WDT_8S" 1 209 "0x1900"
d G "WDT_16" 1 210 "0x1B00"
d G "WDT_32S" 1 211 "0x1D00"
d G "WDT_64S" 1 212 "0x1F00"
d G "WDT_128S" 1 213 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 218 "int16" `118 
f B "setup_timer_1" 1 218 "void(int16 mode)" `117 
f B "get_timer1" 1 219 "int16()" `119 
v L "value" 1 220 "int16" `121 
f B "set_timer1" 1 220 "void(int16 value)" `120  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 223 "0"
d G "T1_INTERNAL" 1 224 "0x85"
d G "T1_EXTERNAL" 1 225 "0x87"
d G "T1_EXTERNAL_SYNC" 1 226 "0x83"
d G "T1_CLK_OUT" 1 228 "8"
d G "T1_DIV_BY_1" 1 230 "0"
d G "T1_DIV_BY_2" 1 231 "0x10"
d G "T1_DIV_BY_4" 1 232 "0x20"
d G "T1_DIV_BY_8" 1 233 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 238 "int8" `123 
v L "period" 1 238 "int8" `124 
v L "postscale" 1 238 "int8" `125 
f B "setup_timer_2" 1 238 "void(int8 mode,int8 period,int8 postscale)" `122 
f B "get_timer2" 1 239 "int8()" `126 
v L "value" 1 240 "int8" `128 
f B "set_timer2" 1 240 "void(int8 value)" `127  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 242 "0"
d G "T2_DIV_BY_1" 1 243 "4"
d G "T2_DIV_BY_4" 1 244 "5"
d G "T2_DIV_BY_16" 1 245 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
v L "mode" 1 250 "int16" `130 
f B "setup_timer_3" 1 250 "void(int16 mode)" `129 
f B "get_timer3" 1 251 "int16()" `131 
v L "value" 1 252 "int16" `133 
f B "set_timer3" 1 252 "void(int16 value)" `132  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 255 "0"
d G "T3_INTERNAL" 1 256 "0x85"
d G "T3_EXTERNAL" 1 257 "0x87"
d G "T3_EXTERNAL_SYNC" 1 258 "0x83"
d G "T3_DIV_BY_1" 1 260 "0"
d G "T3_DIV_BY_2" 1 261 "0x10"
d G "T3_DIV_BY_4" 1 262 "0x20"
d G "T3_DIV_BY_8" 1 263 "0x30"
c L "set_timer3" 1 3 4 "FUNCTION"
v L "mode" 1 269 "int32" `135 
f B "setup_ccp1" 1 269 "void(int32 mode)" `134 
v L "mode" 1 270 "int32" `137 
v L "pwm" 1 270 "int8" `138 
f G "setup_ccp1" 1 270 "void(int32 mode,int8 pwm)" `136 
v L "value" 1 271 "int16" `140 
f B "set_pwm1_duty" 1 271 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 273 "0"
d G "CCP_CAPTURE_FE" 1 274 "0x04"
d G "CCP_CAPTURE_RE" 1 275 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 276 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 277 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 278 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 279 "0x09"
d G "CCP_COMPARE_INT" 1 280 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 281 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 282 "0x0B"
d G "CCP_PWM" 1 283 "0x0C"
d G "CCP_PWM_PLUS_1" 1 284 "0x1c"
d G "CCP_PWM_PLUS_2" 1 285 "0x2c"
d G "CCP_PWM_PLUS_3" 1 286 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 293 "0x48"
d G "T3_CCP2" 1 294 "0x8"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
v L "mode" 1 298 "int32" `145 
f B "setup_ccp2" 1 298 "void(int32 mode)" `144 
v L "mode" 1 299 "int32" `147 
v L "pwm" 1 299 "int8" `148 
f G "setup_ccp2" 1 299 "void(int32 mode,int8 pwm)" `146 
v L "value" 1 300 "int16" `150 
f B "set_pwm2_duty" 1 300 "void(int16 value)" `149 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
v L "mode" 1 307 "int32" `155 
f B "setup_spi" 1 307 "void(int32 mode)" `154 
v L "value" 1 308 "int8" `157 
f B "spi_write" 1 308 "void(int8 value)" `156 
f B "spi_read" 1 309 "int8()" `158 
v L "value" 1 310 "int8" `160 
f G "spi_read" 1 310 "int8(int8 value)" `159 
f B "spi_data_in" 1 311 "int8()" `161 
v L "mode" 1 312 "int32" `163 
f B "setup_spi2" 1 312 "void(int32 mode)" `162 
v L "value" 1 313 "int8" `165 
f B "spi_write2" 1 313 "void(int8 value)" `164 
f B "spi_read2" 1 314 "int8()" `166 
v L "value" 1 315 "int8" `168 
f G "spi_read2" 1 315 "int8(int8 value)" `167 
f B "spi_data_in2" 1 316 "int8()" `169  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 318 "0x00"
d G "SPI_MASTER" 1 319 "0x20"
d G "SPI_SLAVE" 1 320 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 321 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 322 "0x00"
d G "SPI_CLK_DIV_4" 1 323 "0x00"
d G "SPI_CLK_DIV_16" 1 324 "0x01"
d G "SPI_CLK_DIV_64" 1 325 "0x02"
d G "SPI_CLK_T2" 1 326 "0x03"
d G "SPI_SS_DISABLED" 1 327 "0x01"
d G "SPI_XMIT_L_TO_H" 1 329 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 330 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 332 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 333 "0x8000"
d G "SPI_L_TO_H" 1 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 337 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 2 "FUNCTION"
v L "baud" 1 341 "int32" `171 
f B "setup_uart" 1 341 "void(int32 baud)" `170 
v L "baud" 1 342 "int32" `173 
v L "stream" 1 342 "int8" `174 
f G "setup_uart" 1 342 "void(int32 baud,int8 stream)" `172 
v L "baud" 1 343 "int32" `176 
v L "stream" 1 343 "int8" `177 
v L "clock" 1 343 "int32" `178 
f G "setup_uart" 1 343 "void(int32 baud,int8 stream,int32 clock)" `175 
v L "baud" 1 344 "int32" `180 
f B "set_uart_speed" 1 344 "void(int32 baud)" `179 
v L "baud" 1 345 "int32" `182 
v L "stream" 1 345 "int8" `183 
f G "set_uart_speed" 1 345 "void(int32 baud,int8 stream)" `181 
v L "baud" 1 346 "int32" `185 
v L "stream" 1 346 "int8" `186 
v L "clock" 1 346 "int32" `187 
f G "set_uart_speed" 1 346 "void(int32 baud,int8 stream,int32 clock)" `184  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 350 "2"
d G "UART_DATA" 1 351 "4"
d G "UART_AUTODETECT" 1 352 "8"
d G "UART_AUTODETECT_NOWAIT" 1 353 "9"
d G "UART_WAKEUP_ON_RDA" 1 354 "10"
d G "UART_SEND_BREAK" 1 355 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 359 "int32" `189 
f B "setup_comparator" 1 359 "void(int32 mode)" `188  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 361 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 362 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 363 "0xbcf05"
d G "NC_NC_NC_NC" 1 364 "0x0ff07"
d G "A0_A3_A1_A2" 1 365 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 366 "0x9ef01"
d G "A0_VR_A1_VR" 1 367 "0x3ff06"
d G "A3_VR_A2_VR" 1 368 "0xcff0e"
d G "CP1_INVERT" 1 369 "0x0000010"
d G "CP2_INVERT" 1 370 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 377 "int8" `193 
f B "setup_vref" 1 377 "void(int8 mode)" `192  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 379 "0xa0"
d G "VREF_HIGH" 1 380 "0x80"
d G "VREF_F5" 1 382 "0x40"
d G "VREF_COMP" 1 383 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
v L "mode" 1 387 "int8" `195 
f B "setup_low_volt_detect" 1 387 "void(int8 mode)" `194  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 389 "0x1F"
d G "LVD_45" 1 390 "0x1E"
d G "LVD_42" 1 391 "0x1D"
d G "LVD_40" 1 392 "0x1C"
d G "LVD_38" 1 393 "0x1B"
d G "LVD_36" 1 394 "0x1A"
d G "LVD_35" 1 395 "0x19"
d G "LVD_33" 1 396 "0x18"
d G "LVD_30" 1 397 "0x17"
d G "LVD_28" 1 398 "0x16"
d G "LVD_27" 1 399 "0x15"
d G "LVD_25" 1 400 "0x14"
d G "LVD_24" 1 401 "0x13"
d G "LVD_23" 1 402 "0x12"
d G "LVD_22" 1 403 "0x11"
d G "LVD_21" 1 404 "0x10"
d G "LVD_TRIGGER_BELOW" 1 406 "0"
d G "LVD_TRIGGER_ABOVE" 1 407 "0x80"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
v L "mode" 1 412 "int16" `197 
f B "setup_oscillator" 1 412 "int8(int16 mode)" `196 
v L "mode" 1 413 "int16" `199 
v L "tune" 1 413 "sint8" `200 
f G "setup_oscillator" 1 413 "int8(int16 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 416 "0"
d G "OSC_125KHZ" 1 417 "0x10"
d G "OSC_250KHZ" 1 418 "0x20"
d G "OSC_500KHZ" 1 419 "0x30"
d G "OSC_1MHZ" 1 420 "0x40"
d G "OSC_2MHZ" 1 421 "0x50"
d G "OSC_4MHZ" 1 422 "0x60"
d G "OSC_8MHZ" 1 423 "0x70"
d G "OSC_TIMER1" 1 425 "1"
d G "OSC_INTRC" 1 426 "2"
d G "OSC_NORMAL" 1 427 "0"
d G "OSC_IDLE_MODE" 1 429 "0x80"
d G "OSC_31250" 1 430 "0x8000"
d G "OSC_STATE_STABLE" 1 434 "4"
d G "OSC_STATE_EXT_RUNNING" 1 435 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 442 "int16" `202 
f B "setup_adc" 1 442 "void(int16 mode)" `201 
f B "read_adc" 1 443 "int8()" `203 
v L "mode" 1 444 "int8" `205 
f G "read_adc" 1 444 "int8(int8 mode)" `204 
f G "read_adc" 1 445 "int16()" `206 
v L "mode" 1 446 "int8" `208 
f G "read_adc" 1 446 "int16(int8 mode)" `207 
f B "adc_done" 1 447 "int8()" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 449 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 450 "0x100"
d G "ADC_CLOCK_DIV_4" 1 451 "0x04"
d G "ADC_CLOCK_DIV_8" 1 452 "0x01"
d G "ADC_CLOCK_DIV_16" 1 453 "0x05"
d G "ADC_CLOCK_DIV_32" 1 454 "0x02"
d G "ADC_CLOCK_DIV_64" 1 455 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 456 "0x07" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 459 "int8" `211 
f B "setup_adc_ports" 1 459 "void(int8 pins)" `210 
v L "pins" 1 460 "int8" `213 
v L "reference" 1 460 "int8" `214 
f G "setup_adc_ports" 1 460 "void(int8 pins,int8 reference)" `212 
v L "channel" 1 461 "int8" `216 
f B "set_adc_channel" 1 461 "void(int8 channel)" `215  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 464 "0x0F" "None"
d G "ALL_ANALOG" 1 465 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 466 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 467 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 468 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 469 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 470 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 471 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 472 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 473 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 474 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 475 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 476 "0x0D" "A0 A1"
d G "AN0" 1 477 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 478 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 479 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 480 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 481 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 482 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 483 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 484 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 485 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 486 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 487 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 488 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 489 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 492 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 493 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 494 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 495 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 498 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 499 "1"
d G "ADC_READ_ONLY" 1 500 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 506 "sint8" `218 
f B "abs" 1 506 "sint8(sint8 x)" `217 
v L "x" 1 507 "sint16" `220 
f G "abs" 1 507 "sint16(sint16 x)" `219 
v L "x" 1 508 "sint32" `222 
f G "abs" 1 508 "sint32(sint32 x)" `221 
v L "x" 1 509 "float" `224 
f G "abs" 1 509 "float(float x)" `223 
v L "??65535" 1 510 "int8" `226 
v L "??65535" 1 510 "int8" `227 
f B "_mul" 1 510 "int16(int8 ,int8 )" `225 
v L "??65535" 1 511 "sint8" `226 
v L "??65535" 1 511 "sint8" `230 
f G "_mul" 1 511 "sint16(sint8 ,sint8 )" `228 
v L "??65535" 1 512 "int16" `226 
v L "??65535" 1 512 "int16" `233 
f G "_mul" 1 512 "int32(int16 ,int16 )" `231 
v L "??65535" 1 513 "sint16" `226 
v L "??65535" 1 513 "sint16" `236 
f G "_mul" 1 513 "sint32(sint16 ,sint16 )" `234  "Memory Manipulation Prototypes:"
v L "bank" 1 516 "int8" `238 
v L "offset" 1 516 "int8" `239 
f B "read_bank" 1 516 "int8(int8 bank,int8 offset)" `237 
v L "bank" 1 517 "int8" `241 
v L "offset" 1 517 "int8" `242 
v L "value" 1 517 "int8" `243 
f B "write_bank" 1 517 "void(int8 bank,int8 offset,int8 value)" `240 
v L "dest" 1 518 "*int8" `245 
v L "src" 1 518 "*int8" `246 
f B "strcpy" 1 518 "void(*int8 dest,*int8 src)" `244 
v L "dest" 1 519 "*int8" `248 
v L "src" 1 519 "*int8" `249 
f B "strcopy" 1 519 "void(*int8 dest,*int8 src)" `247 
v L "destination" 1 520 "*int8" `251 
v L "value" 1 520 "int8" `252 
v L "num" 1 520 "int16" `253 
f B "memset" 1 520 "void(*int8 destination,int8 value,int16 num)" `250 
v L "destination" 1 521 "*int8" `255 
v L "source" 1 521 "*int8" `256 
v L "num" 1 521 "int16" `257 
f B "memcpy" 1 521 "void(*int8 destination,*int8 source,int16 num)" `254  "String Prototypes:"
v L "cvalue" 1 524 "int8" `259 
f B "toupper" 1 524 "int8(int8 cvalue)" `258 
v L "cvalue" 1 525 "int8" `261 
f B "tolower" 1 525 "int8(int8 cvalue)" `260 
v L "string" 1 526 "*int8" `263 
v L "cstring" 1 526 "*int8" `264 
f B "sprintf" 1 526 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `262  "Data Manipulators Prototypes:"
v L "address" 1 529 "*int8" `267 
v L "bytes" 1 529 "int8" `268 
v L "value" 1 529 "int8" `269 
f B "shift_left" 1 529 "int8(*int8 address,int8 bytes,int8 value)" `266 
v L "address" 1 530 "*int8" `271 
v L "bytes" 1 530 "int8" `272 
v L "value" 1 530 "int8" `273 
f B "shift_right" 1 530 "int8(*int8 address,int8 bytes,int8 value)" `270 
v L "address" 1 531 "*int8" `275 
v L "bytes" 1 531 "int8" `276 
f B "rotate_left" 1 531 "void(*int8 address,int8 bytes)" `274 
v L "address" 1 532 "*int8" `278 
v L "bytes" 1 532 "int8" `279 
f B "rotate_right" 1 532 "void(*int8 address,int8 bytes)" `277 
v L "value" 1 533 "int8" `281 
f B "swap" 1 533 "void(int8 value)" `280 
v L "var" 1 534 "int16" `283 
v L "offset" 1 534 "int8" `284 
f B "make8" 1 534 "int8(int16 var,int8 offset)" `282 
v L "var" 1 535 "int32" `283 
v L "offset" 1 535 "int8" `287 
f G "make8" 1 535 "int8(int32 var,int8 offset)" `285 
v L "varhigh" 1 536 "int8" `289 
v L "varlow" 1 536 "int8" `290 
f B "make16" 1 536 "int16(int8 varhigh,int8 varlow)" `288 
v L "var1" 1 537 "int16" `292 
f B "make32" 1 537 "int32(int16 var1)" `291 
v L "var1" 1 538 "int16" `294 
v L "var2" 1 538 "int16" `295 
f G "make32" 1 538 "int32(int16 var1,int16 var2)" `293 
v L "var1" 1 539 "int16" `294 
v L "var2" 1 539 "int8" `298 
f G "make32" 1 539 "int32(int16 var1,int8 var2)" `296 
v L "var1" 1 540 "int16" `300 
v L "var2" 1 540 "int8" `301 
v L "var3" 1 540 "int8" `302 
f G "make32" 1 540 "int32(int16 var1,int8 var2,int8 var3)" `299 
v L "var1" 1 541 "int8" `304 
f G "make32" 1 541 "int32(int8 var1)" `303 
v L "var1" 1 542 "int8" `294 
v L "var2" 1 542 "int8" `307 
f G "make32" 1 542 "int32(int8 var1,int8 var2)" `305 
v L "var1" 1 543 "int8" `300 
v L "var2" 1 543 "int8" `301 
v L "var3" 1 543 "int8" `311 
f G "make32" 1 543 "int32(int8 var1,int8 var2,int8 var3)" `308 
v L "var1" 1 544 "int8" `313 
v L "var2" 1 544 "int8" `314 
v L "var3" 1 544 "int8" `315 
v L "var4" 1 544 "int8" `316 
f G "make32" 1 544 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `312 
v L "var1" 1 545 "int8" `294 
v L "var2" 1 545 "int16" `319 
f G "make32" 1 545 "int32(int8 var1,int16 var2)" `317 
v L "var1" 1 546 "int8" `300 
v L "var2" 1 546 "int16" `301 
v L "var3" 1 546 "int8" `323 
f G "make32" 1 546 "int32(int8 var1,int16 var2,int8 var3)" `320 
v L "var1" 1 547 "int8" `300 
v L "var2" 1 547 "int8" `301 
v L "var3" 1 547 "int16" `327 
f G "make32" 1 547 "int32(int8 var1,int8 var2,int16 var3)" `324 
v L "var" 1 548 "int8" `329 
v L "bit" 1 548 "int8" `330 
f B "bit_set" 1 548 "void(int8 var,int8 bit)" `328 
v L "var" 1 549 "int16" `329 
v L "bit" 1 549 "int8" `333 
f G "bit_set" 1 549 "void(int16 var,int8 bit)" `331 
v L "var" 1 550 "int32" `329 
v L "bit" 1 550 "int8" `336 
f G "bit_set" 1 550 "void(int32 var,int8 bit)" `334 
v L "var" 1 551 "int8" `338 
v L "bit" 1 551 "int8" `339 
f B "bit_clear" 1 551 "void(int8 var,int8 bit)" `337 
v L "var" 1 552 "int16" `338 
v L "bit" 1 552 "int8" `342 
f G "bit_clear" 1 552 "void(int16 var,int8 bit)" `340 
v L "var" 1 553 "int32" `338 
v L "bit" 1 553 "int8" `345 
f G "bit_clear" 1 553 "void(int32 var,int8 bit)" `343 
v L "var" 1 554 "int8" `347 
v L "bit" 1 554 "int8" `348 
f B "bit_test" 1 554 "int8(int8 var,int8 bit)" `346 
v L "var" 1 555 "int16" `347 
v L "bit" 1 555 "int8" `351 
f G "bit_test" 1 555 "int8(int16 var,int8 bit)" `349 
v L "var" 1 556 "int32" `347 
v L "bit" 1 556 "int8" `354 
f G "bit_test" 1 556 "int8(int32 var,int8 bit)" `352  "#use delay() Prototypes:"
v L "count" 1 559 "int8" `356 
f B "delay_cycles" 1 559 "void(int8 count)" `355 
v L "time" 1 560 "int16" `358 
f B "delay_ms" 1 560 "void(int16 time)" `357 
v L "time" 1 561 "int16" `360 
f B "delay_us" 1 561 "void(int16 time)" `359  "#use rs232() Prototypes:"
v L "cdata" 1 564 "int8" `362 
f B "putchar" 1 564 "void(int8 cdata)" `361 
v L "cdata" 1 565 "int8" `364 
v L "stream" 1 565 "int8" `365 
f G "putchar" 1 565 "void(int8 cdata,int8 stream)" `363 
v L "string" 1 566 "*int8" `367 
f B "puts" 1 566 "void(*int8 string)" `366 
v L "string" 1 567 "*int8" `369 
v L "stream" 1 567 "int8" `370 
f G "puts" 1 567 "void(*int8 string,int8 stream)" `368 
f B "getch" 1 568 "int8()" `371 
v L "stream" 1 569 "int8" `373 
f G "getch" 1 569 "int8(int8 stream)" `372 
v L "string" 1 570 "*int8" `375 
f B "gets" 1 570 "void(*int8 string)" `374 
v L "string" 1 571 "*int8" `377 
v L "stream" 1 571 "int8" `378 
f G "gets" 1 571 "void(*int8 string,int8 stream)" `376 
f B "kbhit" 1 572 "int8()" `379 
v L "stream" 1 573 "int8" `381 
f G "kbhit" 1 573 "int8(int8 stream)" `380 
v L "string" 1 574 "*int8" `383 
f B "printf" 1 574 "void(*int8 string,*int8 _VA_LIST)" `382 
v L "stream" 1 575 "int8" `386 
v L "string" 1 575 "*int8" `387 
f B "fprintf" 1 575 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `385 
f B "putc_send" 1 576 "void()" `389 
v L "stream" 1 577 "int8" `391 
f B "fputc_send" 1 577 "void(int8 stream)" `390 
f B "rcv_buffer_full" 1 578 "int8()" `392 
v L "stream" 1 579 "int8" `394 
f G "rcv_buffer_full" 1 579 "int8(int8 stream)" `393 
f B "rcv_buffer_bytes" 1 580 "int16()" `395 
v L "stream" 1 581 "int8" `397 
f G "rcv_buffer_bytes" 1 581 "int16(int8 stream)" `396 
f B "tx_buffer_full" 1 582 "int8()" `398 
v L "stream" 1 583 "int8" `400 
f G "tx_buffer_full" 1 583 "int8(int8 stream)" `399 
f B "tx_buffer_bytes" 1 584 "int16()" `401 
v L "stream" 1 585 "int8" `403 
f G "tx_buffer_bytes" 1 585 "int16(int8 stream)" `402  "#use i2c() Prototypes:"
f B "i2c_read" 1 588 "int8()" `404 
v L "stream" 1 589 "int8" `406 
f G "i2c_read" 1 589 "int8(int8 stream)" `405 
v L "stream" 1 590 "int8" `408 
v L "ack" 1 590 "int8" `409 
f G "i2c_read" 1 590 "int8(int8 stream,int8 ack)" `407 
v L "data" 1 591 "int8" `411 
f B "i2c_write" 1 591 "int8(int8 data)" `410 
v L "stream" 1 592 "int8" `413 
v L "data" 1 592 "int8" `414 
f G "i2c_write" 1 592 "int8(int8 stream,int8 data)" `412 
f B "i2c_start" 1 593 "void()" `415 
v L "stream" 1 594 "int8" `417 
f G "i2c_start" 1 594 "void(int8 stream)" `416 
v L "stream" 1 595 "int8" `419 
v L "restart" 1 595 "int8" `420 
f G "i2c_start" 1 595 "void(int8 stream,int8 restart)" `418 
f B "i2c_stop" 1 596 "void()" `421 
v L "stream" 1 597 "int8" `423 
f G "i2c_stop" 1 597 "void(int8 stream)" `422 
f B "i2c_isr_state" 1 598 "int8()" `424 
v L "addr" 1 599 "int8" `426 
f B "i2c_slaveaddr" 1 599 "void(int8 addr)" `425 
v L "stream" 1 600 "int8" `428 
v L "addr" 1 600 "int8" `429 
f G "i2c_slaveaddr" 1 600 "void(int8 stream,int8 addr)" `427 
f B "i2c_poll" 1 601 "int8()" `430 
v L "stream" 1 602 "int8" `432 
f G "i2c_poll" 1 602 "int8(int8 stream)" `431 
v L "baud" 1 603 "int32" `434 
f B "i2c_init" 1 603 "void(int32 baud)" `433 
v L "stream" 1 604 "int8" `436 
v L "baud" 1 604 "int32" `437 
f G "i2c_init" 1 604 "void(int8 stream,int32 baud)" `435  "#use spi() Prototypes:"
f B "spi_xfer" 1 607 "int8()" `438 
f G "spi_xfer" 1 608 "int16()" `439 
f G "spi_xfer" 1 609 "int32()" `440 
v L "data" 1 610 "int8" `442 
f G "spi_xfer" 1 610 "int8(int8 data)" `441 
v L "data" 1 611 "int16" `444 
f G "spi_xfer" 1 611 "int16(int16 data)" `443 
v L "data" 1 612 "int32" `446 
f G "spi_xfer" 1 612 "int32(int32 data)" `445 
v L "stream" 1 613 "int8" `448 
v L "data" 1 613 "int8" `449 
f G "spi_xfer" 1 613 "int8(int8 stream,int8 data)" `447 
v L "stream" 1 614 "int8" `448 
v L "data" 1 614 "int16" `452 
f G "spi_xfer" 1 614 "int16(int8 stream,int16 data)" `450 
v L "stream" 1 615 "int8" `448 
v L "data" 1 615 "int32" `455 
f G "spi_xfer" 1 615 "int32(int8 stream,int32 data)" `453 
v L "stream" 1 616 "int8" `457 
v L "data" 1 616 "int8" `458 
v L "bits" 1 616 "int8" `459 
f G "spi_xfer" 1 616 "int8(int8 stream,int8 data,int8 bits)" `456 
v L "stream" 1 617 "int8" `457 
v L "data" 1 617 "int16" `458 
v L "bits" 1 617 "int8" `463 
f G "spi_xfer" 1 617 "int16(int8 stream,int16 data,int8 bits)" `460 
v L "stream" 1 618 "int8" `457 
v L "data" 1 618 "int32" `458 
v L "bits" 1 618 "int8" `467 
f G "spi_xfer" 1 618 "int32(int8 stream,int32 data,int8 bits)" `464 
v L "baud" 1 619 "int32" `469 
f B "spi_init" 1 619 "void(int32 baud)" `468 
v L "stream" 1 620 "int8" `471 
v L "baud" 1 620 "int32" `472 
f G "spi_init" 1 620 "void(int8 stream,int32 baud)" `470 
v L "baud" 1 621 "int32" `474 
f B "spi_speed" 1 621 "void(int32 baud)" `473 
v L "stream" 1 622 "int8" `476 
v L "baud" 1 622 "int32" `477 
f G "spi_speed" 1 622 "void(int8 stream,int32 baud)" `475 
v L "stream" 1 623 "int8" `479 
v L "baud" 1 623 "int32" `480 
v L "clock" 1 623 "int32" `481 
f G "spi_speed" 1 623 "void(int8 stream,int32 baud,int32 clock)" `478 
v L "data" 1 624 "int8" `483 
f B "spi_prewrite" 1 624 "void(int8 data)" `482 
v L "data" 1 625 "int16" `485 
f G "spi_prewrite" 1 625 "void(int16 data)" `484 
v L "data" 1 626 "int32" `487 
f G "spi_prewrite" 1 626 "void(int32 data)" `486 
v L "??65535" 1 627 "int8" `489 
v L "data" 1 627 "int8" `490 
f G "spi_prewrite" 1 627 "void(int8 ,int8 data)" `488 
v L "??65535" 1 628 "int8" `489 
v L "data" 1 628 "int16" `493 
f G "spi_prewrite" 1 628 "void(int8 ,int16 data)" `491 
v L "??65535" 1 629 "int8" `489 
v L "data" 1 629 "int32" `496 
f G "spi_prewrite" 1 629 "void(int8 ,int32 data)" `494 
f B "spi_xfer_in" 1 630 "int8()" `497 
f G "spi_xfer_in" 1 631 "int16()" `498 
f G "spi_xfer_in" 1 632 "int32()" `499 
v L "bits" 1 633 "int8" `501 
f G "spi_xfer_in" 1 633 "int8(int8 bits)" `500 
v L "bits" 1 634 "int8" `503 
f G "spi_xfer_in" 1 634 "int16(int8 bits)" `502 
v L "bits" 1 635 "int8" `505 
f G "spi_xfer_in" 1 635 "int32(int8 bits)" `504 
v L "stream" 1 636 "int8" `507 
v L "bits" 1 636 "int8" `508 
f G "spi_xfer_in" 1 636 "int8(int8 stream,int8 bits)" `506 
v L "stream" 1 637 "int8" `507 
v L "bits" 1 637 "int8" `511 
f G "spi_xfer_in" 1 637 "int16(int8 stream,int8 bits)" `509 
v L "stream" 1 638 "int8" `507 
v L "bits" 1 638 "int8" `514 
f G "spi_xfer_in" 1 638 "int32(int8 stream,int8 bits)" `512  "#use rtos() Prototypes:"
f B "rtos_run" 1 641 "void()" `515 
f B "rtos_yield" 1 642 "void()" `516 
v L "task" 1 643 "int8" `518 
f B "rtos_enable" 1 643 "void(int8 task)" `517 
v L "task" 1 644 "int8" `520 
f B "rtos_disable" 1 644 "void(int8 task)" `519 
f B "rtos_terminate" 1 645 "void()" `521 
v L "flag" 1 646 "int8" `523 
f B "rtos_await" 1 646 "void(int8 flag)" `522 
v L "sem" 1 647 "int8" `525 
f B "rtos_wait" 1 647 "void(int8 sem)" `524 
v L "sem" 1 648 "int8" `527 
f B "rtos_signal" 1 648 "void(int8 sem)" `526 
v L "task" 1 649 "int8" `529 
v L "msg" 1 649 "int8" `530 
f B "rtos_msg_send" 1 649 "void(int8 task,int8 msg)" `528 
f B "rtos_msg_read" 1 650 "int8()" `531 
f B "rtos_msg_poll" 1 651 "int8()" `532 
v L "task" 1 652 "int8" `534 
f B "rtos_overrun" 1 652 "int8(int8 task)" `533 
v L "task" 1 653 "int8" `536 
v L "stat" 1 653 "*int8" `537 
f B "rtos_stats" 1 653 "void(int8 task,*int8 stat)" `535  "#use timer() Prototypes:"
f B "get_ticks" 1 656 "int8()" `538 
f G "get_ticks" 1 657 "int16()" `539 
f G "get_ticks" 1 658 "int32()" `540 
v L "stream" 1 659 "int8" `542 
f G "get_ticks" 1 659 "int8(int8 stream)" `541 
v L "stream" 1 660 "int8" `544 
f G "get_ticks" 1 660 "int16(int8 stream)" `543 
v L "stream" 1 661 "int8" `546 
f G "get_ticks" 1 661 "int32(int8 stream)" `545 
v L "value" 1 662 "int8" `548 
f B "set_ticks" 1 662 "void(int8 value)" `547 
v L "value" 1 663 "int16" `550 
f G "set_ticks" 1 663 "void(int16 value)" `549 
v L "value" 1 664 "int32" `552 
f G "set_ticks" 1 664 "void(int32 value)" `551 
v L "stream" 1 665 "int8" `554 
v L "value" 1 665 "int8" `555 
f G "set_ticks" 1 665 "void(int8 stream,int8 value)" `553 
v L "stream" 1 666 "int8" `554 
v L "value" 1 666 "int16" `558 
f G "set_ticks" 1 666 "void(int8 stream,int16 value)" `556 
v L "stream" 1 667 "int8" `554 
v L "value" 1 667 "int32" `561 
f G "set_ticks" 1 667 "void(int8 stream,int32 value)" `559  "#use pwm() Prototypes:"
f B "pwm_on" 1 670 "void()" `562 
v L "stream" 1 671 "int8" `564 
f G "pwm_on" 1 671 "void(int8 stream)" `563 
f B "pwm_off" 1 672 "void()" `565 
v L "stream" 1 673 "int8" `567 
f G "pwm_off" 1 673 "void(int8 stream)" `566 
v L "duty" 1 674 "int16" `569 
f B "pwm_set_duty" 1 674 "void(int16 duty)" `568 
v L "stream" 1 675 "int8" `571 
v L "duty" 1 675 "int16" `572 
f G "pwm_set_duty" 1 675 "void(int8 stream,int16 duty)" `570 
v L "percent" 1 676 "int16" `574 
f B "pwm_set_duty_percent" 1 676 "void(int16 percent)" `573 
v L "stream" 1 677 "int8" `576 
v L "percent" 1 677 "int16" `577 
f G "pwm_set_duty_percent" 1 677 "void(int8 stream,int16 percent)" `575 
v L "frequency" 1 678 "int32" `579 
f B "pwm_set_frequency" 1 678 "void(int32 frequency)" `578 
v L "stream" 1 679 "int8" `581 
v L "frequency" 1 679 "int32" `582 
f G "pwm_set_frequency" 1 679 "void(int8 stream,int32 frequency)" `580  "#use capture() Prototypes:"
f B "get_capture_time" 1 682 "int16()" `583 
v L "stream" 1 683 "int8" `585 
f G "get_capture_time" 1 683 "int16(int8 stream)" `584 
f B "get_capture_event" 1 684 "int8()" `586 
v L "stream" 1 685 "int8" `588 
f G "get_capture_event" 1 685 "int8(int8 stream)" `587  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 698 "int16" `590 
f B "goto_address" 1 698 "void(int16 address)" `589 
v L "label" 1 699 "int16" `592 
f B "label_address" 1 699 "int16(int16 label)" `591  "Program Memory Prototypes:"
v L "address" 1 702 "int16" `594 
v L "dataptr" 1 702 "*int8" `595 
v L "count" 1 702 "int16" `596 
f B "read_program_memory" 1 702 "void(int16 address,*int8 dataptr,int16 count)" `593 
v L "address" 1 703 "int16" `598 
f B "read_program_eeprom" 1 703 "int16(int16 address)" `597 
v L "address" 1 704 "int16" `600 
f B "erase_program_eeprom" 1 704 "void(int16 address)" `599 
v L "address" 1 705 "int16" `602 
v L "dataptr" 1 705 "*int8" `603 
v L "count" 1 705 "int16" `604 
f B "write_program_memory" 1 705 "void(int16 address,*int8 dataptr,int16 count)" `601 
v L "address" 1 706 "int16" `606 
v L "data" 1 706 "int16" `607 
f B "write_program_eeprom" 1 706 "void(int16 address,int16 data)" `605  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 711 "int16" `608 
v L "address" 1 716 "__EEADDRESS__" `610 
f B "read_eeprom" 1 716 "int8(__EEADDRESS__ address)" `609 
v L "address" 1 717 "__EEADDRESS__" `612 
v L "value" 1 717 "int8" `613 
f B "write_eeprom" 1 717 "void(__EEADDRESS__ address,int8 value)" `611  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 724 "int32" `615 
f B "enable_interrupts" 1 724 "void(int32 interrupt)" `614 
v L "interrupt" 1 725 "int32" `617 
f B "disable_interrupts" 1 725 "void(int32 interrupt)" `616 
v L "interrupt" 1 726 "int32" `619 
f B "clear_interrupt" 1 726 "void(int32 interrupt)" `618 
v L "interrupt" 1 727 "int32" `621 
f B "interrupt_active" 1 727 "int8(int32 interrupt)" `620 
v L "interrupt" 1 728 "int32" `623 
f B "interrupt_enabled" 1 728 "int8(int32 interrupt)" `622 
v L "source" 1 729 "int8" `625 
v L "edge" 1 729 "int8" `626 
f B "ext_int_edge" 1 729 "void(int8 source,int8 edge)" `624 
v L "address" 1 730 "int16" `628 
f B "jump_to_isr" 1 730 "void(int16 address)" `627  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 732 "0x40"
d G "H_TO_L" 1 733 "0"
d G "GLOBAL" 1 735 "0xF2C0"
d G "PERIPH" 1 736 "0xF240"
d G "INT_RTCC" 1 737 "0x00F220"
d G "INT_TIMER0" 1 738 "0x00F220"
d G "INT_TIMER1" 1 739 "0x009D01"
d G "INT_TIMER2" 1 740 "0x009D02"
d G "INT_TIMER3" 1 741 "0x00A002"
d G "INT_EXT_L2H" 1 742 "0x5000F210"
d G "INT_EXT_H2L" 1 743 "0x6000F210"
d G "INT_EXT" 1 744 "0x00F210"
d G "INT_EXT1_L2H" 1 745 "0x5001F008"
d G "INT_EXT1_H2L" 1 746 "0x6001F008"
d G "INT_EXT1" 1 747 "0x00F008"
d G "INT_EXT2_L2H" 1 748 "0x5002F010"
d G "INT_EXT2_H2L" 1 749 "0x6002F010"
d G "INT_EXT2" 1 750 "0x00F010"
d G "INT_RB" 1 751 "0x00FFF208"
d G "INT_AD" 1 752 "0x009D40"
d G "INT_RDA" 1 753 "0x009D20"
d G "INT_TBE" 1 754 "0x009D10"
d G "INT_SSP" 1 755 "0x009D08"
d G "INT_CCP1" 1 756 "0x009D04"
d G "INT_CCP2" 1 757 "0x00A001"
d G "INT_BUSCOL" 1 758 "0x00A008"
d G "INT_LOWVOLT" 1 759 "0x00A004"
d G "INT_COMP" 1 760 "0x00A040"
d G "INT_EEPROM" 1 761 "0x00A010"
d G "INT_OSCF" 1 762 "0x00A080"
d G "INT_USB" 1 763 "0x00A020"
D G "_STDLIB" 3 12 ""
D G "RAND_MAX" 3 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 25 "1"
T G "div_t" 3 33 "{sint8 quot,sint8 rem}" `640 
T G "ldiv_t" 3 38 "{sint16 quot,sint16 rem}" `644  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 43 2 "FUNCTION"
C L "jump_to_isr" 3 46 1 "*"
C L "jump_to_isr" 3 46 1 "*"
V L "s" 3 50 "*int8" `646 
f G "atoi" 3 50 "sint8(*int8 s)" `645  "Syntax: signed int32  atoi32(char * s)"
V L "s" 3 58 "*int8" `648 
f G "atoi32" 3 58 "sint32(*int8 s)" `647  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 46 2 "FUNCTION"
V L "num" 3 79 "sint32" `650 
V L "base" 3 79 "int8" `651 
V L "s" 3 79 "*int8" `652 
f G "itoa" 3 79 "*int8(sint32 num,int8 base,*int8 s)" `649  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 81 1 "*"
C L "itoa" 3 81 1 "*"
V L "s" 3 85 "*int8" `654 
f G "atol" 3 85 "sint16(*int8 s)" `653  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
V L "s" 3 93 "*int8" `656 
V L "endptr" 3 93 "*int8" `657 
V L "base" 3 93 "sint8" `658 
f G "strtol" 3 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `655  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
V L "s" 3 101 "*int8" `660 
V L "endptr" 3 101 "*int8" `661 
V L "base" 3 101 "sint8" `662 
f G "strtoul" 3 101 "int16(*int8 s,*int8 endptr,sint8 base)" `659  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 95 2 "FUNCTION"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
V L "s" 3 110 "*int8" `664 
V L "endptr" 3 110 "*int8" `665 
f G "strtof" 3 110 "float(*int8 s,*int8 endptr)" `663  "provided for compatibility"
D G "strtof48" 3 116 "(s,e) strtof(s, e)"
D G "strtod" 3 117 "(s,e) strtof(s, e)"
C L "strtof" 3 103 1 "FUNCTION"
C L "strtof" 3 120 1 "*"
D G "atof" 3 124 "(s)   strtof(s, 0)"
C L "strtof" 3 120 1 "FUNCTION"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
V L "s" 3 149 "*int8" `667 
f G "atoe" 3 149 "float(*int8 s)" `666  "Pseudo-random sequence generation functions"
C L "atoe" 3 143 1 "FUNCTION"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
f G "rand" 3 169 "int16()" `668  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
V L "seed" 3 191 "int32" `670 
f G "srand" 3 191 "void(int32 seed)" `669  "Memory management functions"
C L "srand" 3 171 3 "FUNCTION"
V L "string" 3 205 "*int8" `672 
f G "system" 3 205 "sint8(*int8 string)" `671  "Searching and sorting utilities"
C L "system" 3 171 1 "FUNCTION"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 4 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
D G "labs" 3 249 "abs"
V L "numer" 3 251 "sint8" `674 
V L "denom" 3 251 "sint8" `675 
f G "div" 3 251 "div_t(sint8 numer,sint8 denom)" `673 
V L "numer" 3 252 "sint16" `677 
V L "denom" 3 252 "sint16" `678 
f G "ldiv" 3 252 "ldiv_t(sint16 numer,sint16 denom)" `676  "Multibyte character functions"
C L "ldiv" 3 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `680 
V L "s2" 5 34 "*int8" `681 
V L "n" 5 34 "int16" `682 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `679 
V L "sc1" 5 36 "*int8" `683 
V L "sc2" 5 37 "*int8" `684 
D G "strcopy" 5 54 "strcpy"
V L "s1" 5 61 "*int8" `686 
V L "s2" 5 61 "*int8" `687 
V L "n" 5 61 "int16" `688 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `685 
V L "s" 5 63 "*int8" `689 
V L "s1" 5 78 "*int8" `691 
V L "s2" 5 78 "*int8" `692 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `690 
V L "s" 5 80 "*int8" `693 
V L "s1" 5 96 "*int8" `695 
V L "s2" 5 96 "*int8" `696 
V L "n" 5 96 "int16" `697 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `694 
V L "s" 5 98 "*int8" `698 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `700 
V L "s2" 5 120 "*int8" `701 
V L "n" 5 120 "int16" `702 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `699 
V L "su1" 5 122 "*int8" `703 
V L "su2" 5 122 "*int8" `704 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*int8" `706 
V L "s2" 5 134 "*int8" `707 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `705 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*int8" `709 
V L "s2" 5 144 "*int8" `710 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `708 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*int8" `712 
V L "s2" 5 157 "*int8" `713 
V L "n" 5 157 "int16" `714 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `711 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*int8" `716 
V L "s2" 5 169 "*int8" `717 
V L "n" 5 169 "int16" `718 
F G "strxfrm" 5 170 "int16(*int8 s1,*int8 s2,int16 n)" `715 
V L "s" 5 171 "*int8" `719 
V L "n1" 5 172 "int8" `720 
V L "s" 5 191 "*int8" `722 
V L "c" 5 191 "int8" `723 
V L "n" 5 191 "int16" `724 
F G "memchr" 5 192 "*int8(*int8 s,int8 c,int16 n)" `721 
V L "uc" 5 193 "int8" `725 
V L "su" 5 194 "*int8" `726 
V L "s" 5 205 "*int8" `728 
V L "c" 5 205 "int8" `729 
F G "strchr" 5 206 "*int8(*int8 s,int8 c)" `727 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*int8" `731 
V L "s2" 5 217 "*int8" `732 
F G "strcspn" 5 218 "int8(*int8 s1,*int8 s2)" `730 
V L "sc1" 5 219 "*int8" `733 
V L "sc2" 5 219 "*int8" `734 
V L "s1" 5 232 "*int8" `736 
V L "s2" 5 232 "*int8" `737 
F G "strpbrk" 5 233 "*int8(*int8 s1,*int8 s2)" `735 
V L "sc1" 5 234 "*int8" `738 
V L "sc2" 5 234 "*int8" `739 
V L "s" 5 247 "*int8" `741 
V L "c" 5 247 "int8" `742 
F G "strrchr" 5 248 "*int8(*int8 s,int8 c)" `740 
V L "p" 5 249 "*int8" `743 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*int8" `745 
V L "s2" 5 262 "*int8" `746 
F G "strspn" 5 263 "int8(*int8 s1,*int8 s2)" `744 
V L "sc1" 5 264 "*int8" `747 
V L "sc2" 5 264 "*int8" `748 
V L "s1" 5 281 "*int8" `750 
V L "s2" 5 281 "*int8" `751 
F G "strstr" 5 282 "*int8(*int8 s1,*int8 s2)" `749 
V L "s" 5 283 "*int8" `752 
V L "t" 5 283 "*int8" `753 
V L "s1" 5 320 "*int8" `755 
V L "s2" 5 320 "*int8" `756 
F G "strtok" 5 321 "*int8(*int8 s1,*int8 s2)" `754 
V L "beg" 5 322 "*int8" `757 
V L "end" 5 322 "*int8" `758 
V L "save" 5 323 "*int8" `759 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*int8" `761 
F G "strlen" 5 370 "int8(*int8 s)" `760 
V L "sc" 5 371 "*int8" `762 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*int8" `764 
V L "s2" 5 380 "*int8" `765 
F G "stricmp" 5 381 "sint8(*int8 s1,*int8 s2)" `763 
V L "s" 5 394 "*int8" `769 
F G "strlwr" 5 395 "*int8(*int8 s)" `768 
V L "p" 5 396 "*int8" `770 
V L "s" 5 408 "*int8" `772 
F G "strupr" 5 409 "*int8(*int8 s)" `771 
V L "p" 5 410 "*int8" `773 
V L "numer" 3 274 "sint8" `674 
V L "denom" 3 274 "sint8" `776 
F G "div" 3 275 "div_t(sint8 numer,sint8 denom)" `673 
V L "val" 3 276 "div_t" `774 
V L "numer" 3 282 "sint16" `677 
V L "denom" 3 282 "sint16" `783 
F G "ldiv" 3 283 "ldiv_t(sint16 numer,sint16 denom)" `676 
V L "val" 3 284 "ldiv_t" `781 
V L "s" 3 361 "*int8" `789 
F G "atoe" 3 362 "float(*int8 s)" `666 
V L "pow10" 3 363 "float" `788 
V L "result" 3 364 "float" `789 
V L "sign" 3 365 "int8" `790 
V L "expsign" 3 366 "int8" `791 
V L "c" 3 367 "int8" `792 
V L "ptr" 3 368 "int8" `793 
V L "i" 3 369 "int8" `794 
V L "exp" 3 370 "float" `795 
V L "expcnt" 3 371 "int8" `796 
C L "atoe" 3 397 1 "FUNCTION"
V L "s" 3 429 "*int8" `809 
F G "atoi" 3 430 "sint8(*int8 s)" `645 
V L "result" 3 431 "sint8" `808 
V L "sign" 3 432 "int8" `809 
V L "base" 3 432 "int8" `810 
V L "index" 3 432 "int8" `811 
V L "c" 3 433 "int8" `812 
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
V L "s" 3 498 "*int8" `814 
F G "atol" 3 499 "sint16(*int8 s)" `653 
V L "result" 3 500 "sint16" `813 
V L "sign" 3 501 "int8" `814 
V L "base" 3 501 "int8" `815 
V L "index" 3 501 "int8" `816 
V L "c" 3 502 "int8" `817 
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "mult_with10" 3 397 1 "FUNCTION"
V L "num" 3 565 "int32" `819 
F G "mult_with10" 3 566 "sint32(int32 num)" `818 
V L "s" 3 571 "*int8" `821 
F G "atoi32" 3 572 "sint32(*int8 s)" `647 
V L "result" 3 573 "sint32" `820 
V L "sign" 3 574 "int8" `821 
V L "base" 3 574 "int8" `822 
V L "index" 3 574 "int8" `823 
V L "c" 3 575 "int8" `824 
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
V L "num" 3 770 "sint32" `650 
V L "base" 3 770 "int8" `651 
V L "s" 3 770 "*int8" `828 
F G "itoa" 3 771 "*int8(sint32 num,int8 base,*int8 s)" `649 
V L "temp" 3 772 "int32" `825 
V L "i" 3 773 "int8" `826 
V L "sign" 3 773 "int8" `827 
V L "cnt" 3 773 "int8" `828 
V L "c" 3 774 "int8" `829 
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
V L "s" 3 885 "*int8" `664 
V L "endptr" 3 885 "*int8" `838 
F G "strtof" 3 886 "float(*int8 s,*int8 endptr)" `663 
V L "pow10" 3 887 "float" `836 
V L "result" 3 888 "float" `837 
V L "skip" 3 889 "int1" `838 
V L "sign" 3 889 "int1" `839 
V L "point" 3 889 "int1" `840 
V L "c" 3 890 "int8" `841 
V L "ptr" 3 891 "int8" `842 
V L "s" 3 1103 "*int8" `660 
V L "endptr" 3 1103 "*int8" `661 
V L "base" 3 1103 "sint8" `847 
F G "strtoul" 3 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `659 
V L "sc" 3 1105 "*int8" `844 
V L "s1" 3 1105 "*int8" `845 
V L "sd" 3 1105 "*int8" `846 
V L "x" 3 1106 "int16" `847 
V L "sign" 3 1107 "int8" `848 
V L "digits" 3 1108 "int8[1]" `849 
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
V L "s" 3 1165 "*int8" `656 
V L "endptr" 3 1165 "*int8" `657 
V L "base" 3 1165 "sint8" `854 
F G "strtol" 3 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `655 
V L "sc" 3 1167 "*int8" `851 
V L "s1" 3 1167 "*int8" `852 
V L "sd" 3 1167 "*int8" `853 
V L "x" 3 1168 "sint16" `854 
V L "sign" 3 1169 "int8" `855 
V L "digits" 3 1170 "int8[1]" `856 
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
V L "string" 3 1228 "*int8" `859 
F G "system" 3 1229 "sint8(*int8 string)" `671 
V L "s" 3 1233 "*int8" `859 
V L "n" 3 1233 "int16" `860 
F G "mblen" 3 1234 "int8(*int8 s,int16 n)" `858 
V L "pwc" 3 1238 "*int8" `862 
V L "s" 3 1238 "*int8" `863 
V L "n" 3 1238 "int16" `864 
F G "mbtowc" 3 1239 "int8(*int8 pwc,*int8 s,int16 n)" `861 
V L "s" 3 1244 "*int8" `866 
V L "wchar" 3 1244 "int8" `867 
F G "wctomb" 3 1245 "int8(*int8 s,int8 wchar)" `865 
V L "pwcs" 3 1250 "*int8" `869 
V L "s" 3 1250 "*int8" `870 
V L "n" 3 1250 "int16" `871 
F G "mbstowcs" 3 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `868 
V L "s" 3 1256 "*int8" `873 
V L "pwcs" 3 1256 "*int8" `874 
V L "n" 3 1256 "int16" `875 
F G "wcstombs" 3 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `872 
V G "_Randseed" 3 1266 "int32" `876 
F G "rand" 3 1269 "int16()" `668 
V L "seed" 3 1274 "int32" `881 
F G "srand" 3 1275 "void(int32 seed)" `669 
V L "p1" 3 1284 "*int8" `881 
V L "p2" 3 1284 "*int8" `882 
T G "*_Cmpfun" 3 1284 "sint8(*int8 p1,*int8 p2)" `880 
V L "qdata" 3 1291 "*int8" `885 
V L "qitems" 3 1291 "int8" `886 
V L "qsize" 3 1291 "int8" `887 
V L "cmp" 3 1291 "_Cmpfun" `888 
F G "qsort" 3 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `884 
V L "m" 3 1292 "int8" `889 
V L "j" 3 1292 "int8" `890 
V L "i" 3 1292 "int8" `891 
V L "l" 3 1292 "int8" `892 
V L "done" 3 1293 "int1" `893 
V L "t" 3 1294 "int8[16]" `894 
V L "key" 3 1319 "*int8" `897 
V L "base" 3 1319 "*int8" `898 
V L "num" 3 1319 "int16" `899 
V L "width" 3 1319 "int16" `900 
V L "cmp" 3 1319 "_Cmpfun" `901 
F G "bsearch" 3 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `896 
V L "p" 3 1321 "*int8" `902 
V L "q" 3 1321 "*int8" `903 
V L "n" 3 1322 "int16" `904 
V L "pivot" 3 1323 "int16" `905 
V L "val" 3 1324 "sint8" `906 
C L "bsearch" 3 397 1 "FUNCTION"
D G "_STDIO" 7 12 ""
D G "ONE_SEC" 2 4 "33" "1000/((4/8000)*(65535)(1)) = 32.767"
D G "TEN_SEC" 2 5 "ONE_SEC*10"
D G "buf_length" 2 6 "255"
D G "TELEPHONE_LENGHT" 2 7 "10"
D G "TELEPHONE_ADDRESS" 2 8 "25"
D G "DISTANCE_LIMIT" 2 9 "512"
D G "Send_Message" 2 11 "input(PIN_b0)"
V G "timerCounter" 2 13 "int8" `910 
V G "timerGPS" 2 14 "int16" `911 
V G "LatRead" 2 17 "int8[10]" `912 
V G "LonRead" 2 17 "int8[10]" `913 
V G "savePosition" 2 18 "int8" `914 
V G "GPS_Connected" 2 19 "int8" `915 
V G "latitud" 2 20 "float" `916 
V G "longitud" 2 20 "float" `917 
V G "LatWrite" 2 21 "int8[10]" `918 
V G "LonWrite" 2 22 "int8[10]" `919 
V G "latitudConverted" 2 23 "float" `920 
V G "longitudConverted" 2 24 "float" `921 
V G "str" 2 34 "int8[255]" `922 
V G "buf" 2 34 "int8[255]" `923 
V G "str_flag" 2 35 "int8" `924 
V G "flag_buf" 2 35 "int8" `925 
V G "str_flag2" 2 35 "int8" `926 
V G "i" 2 36 "int8" `927 
V G "voltage" 2 40 "float" `928 
f G "setup" 0 9 "void()" `929 
f G "start_alert" 0 10 "void()" `930 
f G "Motor1_Start" 0 11 "void()" `931 
f G "If_Message" 0 12 "void()" `932 
f G "process_tel_number" 0 13 "void()" `933 
f G "Get_GPS" 0 14 "void()" `934 
f G "gps_info_processor" 0 15 "void()" `935 
V L "characterRecived" 0 16 "int8" `937 
f G "dummyFunction" 0 16 "void(int8 characterRecived)" `936 
f G "AdcReadAndProcessing" 0 17 "int16()" `938 
F G "t0" 0 21 "void()" `939 
F G "rda_isr" 0 38 "void()" `940 
V L "characterRecived" 0 39 "int8" `941 
F G "MAIN" 0 44 "void()" `942 
V L "distancePower" 0 45 "int16" `943 
C L "MAIN" 0 48 1 "FUNCTION"
F G "setup" 0 64 "void()" `929 
C L "setup" 0 48 1 "FUNCTION"
F G "start_alert" 0 77 "void()" `930 
C L "start_alert" 0 48 1 "FUNCTION"
C L "start_alert" 0 48 1 "FUNCTION"
F G "Motor1_Start" 0 93 "void()" `931 
V L "duty" 0 94 "int8" `946 
C L "Motor1_Start" 0 48 1 "FUNCTION"
C L "Motor1_Start" 0 48 1 "FUNCTION"
F G "If_Message" 0 113 "void()" `932 
V L "_Cel1" 0 114 "int8[8]" `947 
V L "_Cel2" 0 114 "int8[8]" `948 
V L "indexM" 0 116 "int8" `949 
V L "Num1" 0 122 "float" `950 
V L "Num2" 0 123 "float" `951 
V L "index" 0 125 "int8" `952 
C L "If_Message" 0 48 1 "FUNCTION"
F G "process_tel_number" 0 148 "void()" `933 
C L "process_tel_number" 0 48 1 "FUNCTION"
C L "process_tel_number" 0 48 1 "FUNCTION"
C L "process_tel_number" 0 48 1 "FUNCTION"
C L "process_tel_number" 0 48 1 "FUNCTION"
C L "process_tel_number" 0 48 1 "FUNCTION"
C L "process_tel_number" 0 48 1 "FUNCTION"
V L "index" 0 164 "int8" `967 
F G "Get_GPS" 0 174 "void()" `934 
V L "lat" 0 175 "int8[9]" `968 
V L "lg" 0 175 "int8[10]" `969 
C L "Get_GPS" 0 48 1 "FUNCTION"
V L "index" 0 182 "int8" `970 
C L "Get_GPS" 0 48 1 "FUNCTION"
C L "Get_GPS" 0 48 1 "FUNCTION"
V L "index" 0 194 "int8" `971 
F G "gps_info_processor" 0 207 "void()" `935  "Alert that GPS is Connected/Disconnected"
C L "gps_info_processor" 0 48 1 "FUNCTION"
C L "gps_info_processor" 0 48 1 "FUNCTION"
C L "gps_info_processor" 0 48 1 "FUNCTION"
C L "gps_info_processor" 0 48 1 "FUNCTION"
C L "gps_info_processor" 0 48 2 "FUNCTION"
V L "index" 0 244 "int8" `985 
V L "characterRecived" 0 253 "int8" `987 
F G "dummyFunction" 0 254 "void(int8 characterRecived)" `936 
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
C L "dummyFunction" 0 48 1 "FUNCTION"
F G "AdcReadAndProcessing" 0 305 "int16()" `938 
V L "data_adc0" 0 306 "int16" `986 
V L "mmDistance" 0 306 "int16" `987 
V L "distancePower" 0 306 "int16" `988 
C L "AdcReadAndProcessing" 0 48 1 "FUNCTION"
C L "AdcReadAndProcessing" 0 48 1 "FUNCTION"
C L "AdcReadAndProcessing" 0 48 1 "FUNCTION"
C L "AdcReadAndProcessing" 0 320 1 "*2"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
